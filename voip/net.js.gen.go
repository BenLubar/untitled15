// AUTOMATICALLY GENERATED FILE. DO NOT EDIT.

package main

var netjs = js(asset.init(asset{Name: "net.js", Content: "" +
	"var command = function() {\n\tvar audio = {};\n\n\treturn {\n\t\t'': function(u, n) {\n\t\t\taudio[u].next.push(n);\n\t\t},\n\t\t'connected': function(u) {\n\t\t\tvar context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\tvar input = context.createOscillator();\n\t\t\tvar node = (context.createScriptProcessor ||\n\t\t\t            context.createJavaScriptNode).call(context, 4096, 1, 1);\n\t\t\tnode.next = [];\n\t\t\tnode.onaudioprocess = function(e) {\n\t\t\t\tvar buf = this.next.shift();\n\t\t\t\tif (buf) {\n\t\t\t\t\tvar data = e.outputBuffer.getChannelData(0);\n\t\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\t\tdata[i] = buf[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tinput.connect(node);\n\t\t\tnode.input = input;\n\t\t\tnode.connect(context.destination);\n\t\t\taudio[u] = node;\n\t\t},\n\t\t'disconnected': function(u) {\n\t\t\taudio[u].input.disconnect();\n\t\t\taudio[u].disconnect();\n\t\t\tdelete audio[u];\n\t\t}\n\t};\n}();\n\nvar net = function() {\n\tvar queue = [];\n\tvar backoff = 0;\n\tvar ws;\n\tfunction reset() {\n\t\tws = new WebSocket('ws://' + location.host + '/sock');\n\t\tws.onmessage = function(e) {\n\t\t\tvar data = JSON.parse(e.data);\n\t\t\tif (data.Special) {\n\t\t\t\tcommand[data.Special](data.User);\n\t\t\t}\n\t\t\tif (data.Audio) {\n\t\t\t\tvar audio = new Uint8Array(data.Audio.length);\n\t\t\t\tfor (var i = 0; i < audio.length; i++) {\n\t\t\t\t\taudio[i] = data.Audio.charCodeAt(i);\n\t\t\t\t}\n\t\t\t\tcommand[''](data.User, new Float32Array(audio.buffer));\n\t\t\t\tdata.Audio = true;\n\t\t\t}\n\t\t\tconsole.log('net: message:', data);\n\t\t};\n\t\tws.onopen = function(e) {\n\t\t\tconsole.log('net: connection opened');\n\t\t\tqueue.forEach(function(p) {\n\t\t\t\tws.send(p);\n\t\t\t});\n\t\t\tqueue = null;\n\t\t};\n\t\tws.onclose = function(e) {\n\t\t\tconsole.log('net: connection closed:', e.code, e.reason, 'clean: ' + e.wasClean);\n\t\t\tif (!queue) {\n\t\t\t\tqueue = [];\n\t\t\t}\n\t\t\tsetTimeout(reset, backoff += 1000);\n\t\t};\n\t\tws.onerror = function(e) {\n\t\t\tconsole.log('net: unknown error');\n\t\t};\n\t}\n\n\treset();\n\n\treturn {\n\t\tsend: function(data) {\n\t\t\tdata = JSON.stringify(data);\n\t\t\tif (queue) {\n\t\t\t\tqueue.push(data);\n\t\t\t} else {\n\t\t\t\tws.send(data);\n\t\t\t}\n\t\t}\n\t};\n}();\n\n(navigator.getUserMedia ||\n navigator.webkitGetUserMedia ||\n navigator.mozGetUserMedia ||\n navigator.msGetUserMedia ||\n function(opt, success, failure) {\n\t failure('getUserMedia is not supported by this browser');\n }).call(navigator,\n\t{video: false, audio: true},\n\tfunction(stream) {\n\t\tconsole.log('stream', stream);\n\t\tvar context = new (window.AudioContext || window.webkitAudioContext)();\n\t\tvar input = context.createMediaStreamSource(stream);\n\t\tvar node = (context.createScriptProcessor ||\n\t\t            context.createJavaScriptNode).call(context, 4096, 1, 1);\n\t\tnode.onaudioprocess = function(e) {\n\t\t\tnet.send({'Audio': String.fromCharCode.apply(String, new Uint8Array(e.inputBuffer.getChannelData(0).buffer))});\n\t\t};\n\t\tinput.connect(node);\n\t\tnode.connect(context.destination);\n\t}, function(err) {\n\t\tconsole.log('error', err);\n\t});\n" +
	""}))
